// wifi-auto
// Prompt and automatically hack selected wifi network
// If a path is given, all wifi network available will be hacked and dump into the file


// init and import
crypto = include_lib("/lib/crypto.so")
hostComputer = get_shell.host_computer
computerNetworkDevices = hostComputer.network_devices

import_code("dev-lib/dev-lib.src")

cliDef = {
  "argsDef": [ {
    "name": "file",
    "description": "wifi list file path. Create/override it with --dump",
    "default": "",
  } ],
  "optionsDef": [
    {
      "name": "help",
      "alias": "h",
      "description": "Display help message",
    },
    {
      "name": "dump",
      "alias": "d",
      "description": "Create/override file with the dumped wifi list",
    },
    {
      "name": "interval",
      "alias": "i",
      "description": "Interval to wait between each switch",
      "arg": {
        "name": "int_in_sec",
        "default": 60,
      },
    },
  ],
  "description": "If no file is given, select a wifi and auto hack it." + char(10) + "If a file is given:\n  - with --dump create or override the file\n  - switch beetwen each wifi at interval given by --interval [default: 60sec]",
}
cliDef.usage = "wifi-auto [--options] " + devLib.Cli.formatArg(cliDef.argsDef[0])
cli = devLib.Cli.init(cliDef)
args = cli.args



// functions
findWifiPassword = function(network)
  potentialAcks = 300000 / (network.power + 15)
  crypto.airmon("start", network.device)
  print(network.bssid + " " + network.essid + " " + round(potentialAcks) + " ACKs\n--------")
  crypto.aireplay(network.bssid, network.essid, potentialAcks)
  crypto.airmon("stop", network.device)
  network.password = crypto.aircrack(current_path + "/file.cap")
  hostComputer.File(current_path + "/file.cap").delete
  return network
end function

formatResults = function(networks = [])
  str = "ESSID BSSID PASSWORD POWER DEVICE"
  for network in networks
    str = str + "\n" + network.essid + " " + network.bssid + " " + network.password + " " + network.power + " " + network.device
  end for
  return format_columns(str)
end function

listWifi = function(printIt = true)
  deviceNames = []
  allNetworks = []
  deviceList = computerNetworkDevices.split(char(10))

  for device in deviceList
    deviceName = device.split(" ")[0]
    if deviceName != "" then deviceNames.push(deviceName)
  end for

  networksSelectStr = "# PWR% ESSID BSSID DEVICE"
  for deviceName in deviceNames
    networks = get_shell.host_computer.wifi_networks(deviceName)
    for network in networks
      splitNetwork = network.split(" ")
      network = {
        "bssid": splitNetwork[0],
        "power": splitNetwork[1][ : -1].to_int,
        "essid": splitNetwork[2],
        "device": deviceName,
        "password": "",
      }
      allNetworks.push(network)
    end for
  end for
  allNetworks.sort("power", 0)
  i = 1
  for network in allNetworks
    networkStr = network.power + " " + network.essid + " " + network.bssid + " " + network.device
    networksSelectStr = networksSelectStr + "\n" + i + ". " + networkStr
    i = 1 + i
  end for
  if printIt then print(format_columns(networksSelectStr))
  return allNetworks
end function

hackWifi = function(networks)
  selectedIndex = user_input("\nSelect Wifi: ").to_int - 1

  if typeof(selectedIndex) == "string" or selectedIndex < 0 or selectedIndex > networks.len - 1 then
    exit("Wrong index selection!")
  end if

  print("\n========\n" + formatResults([ findWifiPassword(networks[selectedIndex]) ]))
  print("")
end function

hackInBulk = function(networks, filePath)
  parse = filePath.split("/")
  path = parse[ : -1].join("/")
  if not path then path = current_path
  file = parse[parse.len - 1]

  createFile = hostComputer.touch(path, file)
  if typeof(createFile) == "string" then
    print(createFile)
  end if

  content = ""
  results = []
  file = hostComputer.File(filePath)
  i = 0
  for network in networks
    i = 1 + i
    print("\nHack nÂ°" + i + "/" + networks.len)
    results.push(findWifiPassword(network))
    content = formatResults(results)
    setContent = file.set_content(content)
    if typeof(setContent) == "string" then
      print(setContent)
    end if
    print("\n========\n" + content)
    print("")
  end for
end function

switchAuto = function(filePath, interval = 60)
  getNetwork = function(networks)
    index = devLib.random(networks.len - 1)
    return networks[index]
  end function
  fileContent = hostComputer.File(filePath).get_content
  entries = fileContent.toCsv.split(char(10))
  networks = []
  for entry in entries
    if entry == "ESSID,BSSID,PASSWORD,POWER,DEVICE" then continue
    netParsed = entry.split(",")
    network = {
      "ESSID": netParsed[0],
      "BSSID": netParsed[1],
      "PASSWORD": netParsed[2],
      "POWER": netParsed[3],
      "DEVICE": netParsed[4],
    }
    networks.push(network)
  end for

  previousNetwork = null
  while (true)
    network = getNetwork(networks)
    while network.ESSID == previousNetwork
      network = getNetwork(networks)
    end while
    print(devLib.colors.green + "Connecting to " + network.ESSID)
    previousNetwork = network.ESSID
    hostComputer.connect_wifi(
      network.DEVICE,
      network.BSSID,
      network.ESSID,
      network.PASSWORD)
    wait(interval.to_int)
  end while

end function


// main
if args.file == "" then
  hackWifi(listWifi)
else
  if args.dump then
    hackInBulk(listWifi, args.file)
  else
    switchAuto(args.file, args.interval)
  end if
end if
