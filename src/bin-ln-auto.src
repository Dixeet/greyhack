// bin-ln-auto
// Automatically parse every file in the given folder
// For every binary create a symlink in /bin


// init and import
hostComputer = get_shell.host_computer
import_code("dev-lib/dev-lib.src")

cliDef = {
  "argsDef": [ {
    "name": "source",
    "description": "Bin source folder path",
    "default": home_dir + "/dev/bin",
  } ],
  "optionsDef": [ {
    "name": "help",
    "alias": "h",
    "description": "Display help message",
  } ],
  "description": "Create a symlink in /bin for every binary in folder",
}
cliDef.usage = "bin-ln-auto [--options] " + devLib.Cli.formatArg(cliDef.argsDef[0])
cli = devLib.Cli.init(cliDef)
args = cli.args

// functions
parseAndLink = function(folder)
  if folder.is_folder == 1 then
    files = folder.get_files
    folders = folder.get_folders
    for file in files
      if file.is_binary == 1 then
        linkPath = "/bin/" + file.name
        targetFile = hostComputer.File(linkPath)
        if targetFile then
          if targetFile.is_symlink then
            print(devLib.colors.cyan + linkPath + " symlink already exists. Deleting...")
            hostComputer.File(linkPath).delete
          else
            print(devLib.colors.red + linkPath + " already exists and not a symlink. Skipping...")
          end if
        end if
        symResult = file.symlink("/bin", file.name)
        if typeof(symResult) == "string" then
          print(devLib.colors.red + file.name + " : " + symResult)
        else
          print(devLib.colors.green + linkPath + " --> " + file.path + " symlink created")
        end if
      end if
    end for
    for fold in folders
      parseAndLink(fold)
    end for
  end if
end function


// main
path = home_dir + "/dev/bin"
if args.source then path = args.source
folder = hostComputer.File(path)
if folder == null or not folder.is_folder then exit("source path is not a folder")
parseAndLink(folder)
